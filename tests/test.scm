#!r6rs

(import (rnrs) (xunit))

(add-message "this is a message")
(assert-= 2 (+ 1 1))
(assert-boolean=? #t (not (not (not #f))))
(assert-char-ci=? #\z (integer->char (+ 25 (char->integer #\A))))
(assert-char=? #\Z (integer->char (+ 25 (char->integer #\A))))
(assert-string=? "R6RS" (string-append "R" (number->string 6) "RS"))
(assert-boolean? #t)
(assert-char? #\a)
(assert-complex? +i)
(assert-even? 2)
(assert-exact? 1)
(assert-finite? 0)
(assert-inexact? #i3)
(assert-infinite? +inf.0)
(assert-integer-valued? 3+0i)
(assert-integer? 3)
(assert-list? '(l i s t))
(assert-nan? +nan.0)
(assert-negative? -1)
(assert-null? '())
(assert-number? 7)
(assert-odd? 1)
(assert-pair? '(car . cdr))
(assert-positive? 1)
(assert-procedure? call/cc)
(assert-rational-valued? 6/10+0.0i)
(assert-rational? 6/10)
(assert-real-valued? +nan.0+0i)
(assert-real? -2.5+0i)
(assert-string? "string")
(assert-symbol? 'symbol)
(assert-vector? '#(v e c t o r))
(assert-zero? (- 1 1))
(skip-unless #f
  (assert-boolean=? #t #f)
  (assert-= 0 1))

(report)
